# kiwoom API 함수를 직접 사용할 수 없어서, dynamicCall(API) 형식으로 사용
# OCX 방식이기 때문에 API 호출 시 dynamicCall 사용
# QAxWidget -> self.kiwoom -> dynamicCall(kiwoom API)


[OnReceiveTrData() 이벤트]

void OnReceiveTrData(
          BSTR sScrNo,       // 화면번호
          BSTR sRQName,      // 사용자 구분명
          BSTR sTrCode,      // TR이름
          BSTR sRecordName,  // 레코드 이름
          BSTR sPrevNext,    // 연속조회 유무를 판단하는 값 0: 연속(추가조회)데이터 없음, 2:연속(추가조회) 데이터 있음
          LONG nDataLength,  // 사용안함.
          BSTR sErrorCode,   // 사용안함.
          BSTR sMessage,     // 사용안함.
          BSTR sSplmMsg     // 사용안함.
    )

          요청했던 조회데이터를 수신했을때 발생됩니다.
          수신된 데이터는 이 이벤트내부에서 GetCommData()함수를 이용해서 얻어올 수 있습니다.

        def _on_receive_tr_data(self, screen_no, rqname, trcode, record_name, next, unused1, unused2,unused3, unused4)

[GetRepeatCnt() 함수]

          GetRepeatCnt(
          BSTR sTrCode, // TR 이름
          BSTR sRecordName // 레코드 이름
          )

          데이터 수신시 멀티데이터의 갯수(반복수)를 얻을수 있습니다.
          예를들어 차트조회는 한번에 최대 900개 데이터를 수신할 수 있는데
          이렇게 수신한 데이터갯수를 얻을때 사용합니다.
          이 함수는 OnReceiveTRData()이벤트가 발생될때 그 안에서 사용해야 합니다.

          ------------------------------------------------------------------------------------------------------------------------------------

          예)
          [OPT10081 : 주식일봉차트조회요청예시]

          OnReceiveTrData(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              int nCnt = OpenAPI.GetRepeatCnt(sTrcode, strRQName);		// 데이터 반복건수 구함
              for (int nIdx = 0; nIdx < nCnt; nIdx++)
              {
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("거래량"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("시가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("고가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("저가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("현재가"));   strData.Trim();
              }
            }
          }

          ------------------------------------------------------------------------------------------------------------------------------------


[CommRqData() 함수]

          TR 요청 함수

          CommRqData(
          BSTR sRQName,    // 사용자 구분명 (임의로 지정, 한글지원)
          BSTR sTrCode,    // 조회하려는 TR이름
          long nPrevNext,  // 연속조회여부
          BSTR sScreenNo  // 화면번호 (4자리 숫자 임의로 지정)
          )

          조회요청 함수입니다.
          리턴값 0이면 조회요청 정상 나머지는 에러

          예)
          -200 시세과부하
          -201 조회전문작성 에러


[GetCommData() 함수]

          GetCommData(
          BSTR strTrCode,   // TR 이름
          BSTR strRecordName,   // 레코드이름
          long nIndex,      // nIndex번째
          BSTR strItemName) // TR에서 얻어오려는 출력항목이름

          OnReceiveTRData()이벤트가 발생될때 수신한 데이터를 얻어오는 함수입니다.
          이 함수는 OnReceiveTRData()이벤트가 발생될때 그 안에서 사용해야 합니다.

          ------------------------------------------------------------------------------------------------------------------------------------

          예)
          [OPT10081 : 주식일봉차트조회요청예시]

          OnReceiveTrData(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              int nCnt = OpenAPI.GetRepeatCnt(sTrcode, strRQName);
              for (int nIdx = 0; nIdx < nCnt; nIdx++)
              {
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("거래량"));   strData.Trim();	// nIdx번째의 거래량 데이터 구함
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("시가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("고가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("저가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("현재가"));   strData.Trim();
              }
            }
          }

          ------------------------------------------------------------------------------------------------------------------------------------


 [LONG GetLoginInfo()]
    # 로그인 후 사용할 수 있으며 인자값에 대응하는 정보를 얻을 수 있습니다.
    # 인자는 다음값을 사용할 수 있습니다.
    #
    # "ACCOUNT_CNT" : 보유계좌 갯수를 반환합니다.
    # "ACCLIST" 또는 "ACCNO" : 구분자 ';'로 연결된 보유계좌 목록을 반환합니다.
    # "USER_ID" : 사용자 ID를 반환합니다.
    # "USER_NAME" : 사용자 이름을 반환합니다.
    # "GetServerGubun" : 접속서버 구분을 반환합니다.(1 : 모의투자, 나머지 : 실거래 서버)
    # "KEY_BSECGB" : 키보드 보안 해지여부를 반환합니다.(0 : 정상, 1 : 해지)
    # "FIREW_SECGB" : 방화벽 설정여부를 반환합니다.(0 : 미설정, 1 : 설정, 2 : 해지)


[SendOrder( ) 함수]

        SendOrder(
        BSTR sRQName,     // 사용자 > 구분명
        BSTR sScreenNo,   // 화면 번호
        BSTR sAccNo,      // 계좌번호 10자리
        LONG nOrderType,  // 주문 유형(1: 신규 매수, 2: 신규 매도 3: 매수 취소, 4: 매도 취소, 5: 매수 정정, 6: 매도 정정)
        BSTR sCode,       // 종목 코드(6자리)
        LONG nQty,        // 주문 수량
        LONG nPrice,      // 주문 가격
        BSTR sHogaGb,     // 거래 구분(혹은 호가 구분)은 아래 참고
        BSTR sOrgOrderNo  // 원주문 번호. 신규 주문에는 공백 입력, 정정/취소 시 입력합니다.하지만 정정/취소 주문이 아니라 신규 주문을 할 때는 빈 값으로 사용합니다.
        )
        서버에 주문을 전송하는 함수입니다.
        9개 인자 값을 가진 주식 주문 함수이며 리턴 값이 0이면 성공이며 나머지는 에러입니다.
        1초에 5회만 주문 가능하며 그 이상 주문 요청하면 에러 -308을 리턴합니다.
        ※ 시장가 주문 시 주문 가격은 0으로 입력합니다.
        ※ 취소 주문일 때 주문 가격은 0으로 입력합니다.
        [거래 구분]
        00 : 지정가
        03 : 시장가
        05 : 조건부지정가
        06 : 최유리지정가
        07 : 최우선지정가
        10 : 지정가IOC
        13 : 시장가IOC
        16 : 최유리IOC
        20 : 지정가FOK
        23 : 시장가FOK
        26 : 최유리FOK
        61 : 장전시간외종가
        62 : 시간외단일가매매
        81 : 장후시간외종가
        ※ 모의투자에서는 지정가 주문과 시장가 주문만 가능합니다.
        [정규장 외 주문]
        장전 동시 호가 주문
        08:30~09:00        거래 구분 00: 지정가 / 03: 시장가(일반 주문처럼)
        ※ 08:20~08:30 시간의 주문은 키움에서 대기하여 08:30에 순서대로 거래소로 전송합니다.
        장전 시간 외 종가
        08:30~08:40        거래 구분 61: 장전시간외종가. 가격 0 입력
        ※ 전일 종가로 거래. 미체결 시 자동 취소되지 않음
        장마감 동시 호가 주문
        15:20~15:30        거래 구분 00: 지정가 / 03: 시장가(일반 주문처럼)
        장후 시간 외 종가
        15:40~16:00        거래 구분 81: 장후 시간 외 종가. 가격 0 입력
        ※ 당일 종가로 거래
        시간 외 단일가
        16:00~18:00        거래 구분 62: 시간 외 단일가. 가격 입력
        ※ 10분 단위로 체결, 당일 종가 대비 + -10% 가격으로 거래


[OnReceiveMsg( ) 이벤트]
    주문메세지 확인
    OnReceiveMsg(
                BSTR sScrNo,   // 화면 번호
                BSTR sRQName,  // 사용자 구분명
                BSTR sTrCode,  // TR 이름
                BSTR sMsg      // 서버에서 전달하는 메시지
    )
    서버 통신 후 수신한 서버 메시지를 알려 줍니다.
        데이터 조회 시 입력 값(Input) 오류, 주문 전송 시 주문 거부 사유 등을 확인할 수 있습니다.
        메시지에 포함된 6자리 코드 번호는 변경될 수 있으니, 여기에 수신된 코드 번호를 특정 용도로 사용하지 마시기 바랍니다.
        예) “조회가 완료되었습니다.”
        예) “계좌번호 입력을 확인해 주세요.”
        예) “조회할 자료가 없습니다.”
        예) “증거금 부족으로 주문이 거부되었습니다.”


OnReceiveChejanData(
        BSTR sGubun,        // 체결 구분    ===>  접수와 체결 시 '0' , 국내 주식 잔고 변경 '1' , 파생 잔고 변경 '4'
        LONG nItemCnt,      // 체결 시행 시 발생하는 정보 항목 수
        BSTR sFIdList       // 증권 업무 구분 고유값 ex) 주문 번호’라는 용어는 FID가 913
    )
        주문 전송 후 주문 접수, 체결 통보, 잔고 통보를 수신할 때마다 발생됩니다.
        GetChejanData() 함수를 이용해서 FID 항목별 값을 얻을 수 있습니다.